/**
 * Great thing #1: templating
 * 
 * Idea is that we can simplify DOM creation by using patterns.
 * There are 3rd party libraries we can use to take advantage of patterns.
 * 
 * Great thing #2: gulp
 */

window.addEventListener('load', function () {
    // Version 1: works well for simple dom elements
    // let pet = document.createElement('li');
    // pet.textContent = 'Angry Parrot';


    // Version 2: works well-ish for more complex structures
    // let pet = document.createElement('li');
    // innerHTML is like textContent but you can add HTML child elements
    // pet.innerHTML = '<h2>Its a crutch!</h2><p>whats up</p>';

    let creatures = ['parrot', 'falcon', 'squirrel', 'dog'];

    // Mustache.render(string, object)
    // Mustache.render(template-to-show, values-to-insert);
    // RETURNS A STRING
    // console.log(Mustache.render('Hey {{ person }}, you seem cool.', {
    //     person: 'Frankliny',
    // }));

    // Version 3: benefits without the cost
    let parent = document.querySelector('#pets');
    for (let i = 0; i < creatures.length; i++) {
        // console.log(creatures[i]);

        let pet = document.createElement('li');
        // Use the template, but populate values for 'animalName' and 'adjective'
        // Take the string generated by the template and make it the innerHTML of our
        // new <li>.
        pet.innerHTML = Mustache.render(
            document.querySelector('#pet-template').innerHTML,
            { animalName: creatures[i], adjective: 'fuzzy' }
        );
        // pet.innerHTML = document.querySelector('#pet-template').innerHTML; // big idea: bring the string FROM YOUR HTML
        parent.appendChild(pet);
    }
});